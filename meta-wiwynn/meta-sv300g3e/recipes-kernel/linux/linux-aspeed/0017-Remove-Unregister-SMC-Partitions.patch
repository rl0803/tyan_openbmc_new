From a80fb3e1837a876d6cc68ee7bbefb1789cfbf9a2 Mon Sep 17 00:00:00 2001
From: Dicos Tsai <dicos_tsai@wiwynn.com>
Date: Wed, 16 Dec 2020 16:49:23 +0800
Subject: [PATCH] Remove Unregister SMC Partitions

---
 drivers/mtd/spi-nor/aspeed-smc.c | 27 ++++++++++++++++++++++++---
 1 file changed, 24 insertions(+), 3 deletions(-)
 mode change 100644 => 100755 drivers/mtd/spi-nor/aspeed-smc.c

diff --git a/drivers/mtd/spi-nor/aspeed-smc.c b/drivers/mtd/spi-nor/aspeed-smc.c
old mode 100644
new mode 100755
index 0805dcab8cb1..e8c50c7bfea0
--- a/drivers/mtd/spi-nor/aspeed-smc.c
+++ b/drivers/mtd/spi-nor/aspeed-smc.c
@@ -21,6 +21,7 @@
 #include <linux/sysfs.h>
 
 #define DEVICE_NAME	"aspeed-smc"
+#define FSC_BASE_ADDRESS 0x1e620000
 
 /*
  * The driver only support SPI flash
@@ -1223,7 +1224,7 @@ static int aspeed_smc_chip_setup_finish(struct aspeed_smc_chip *chip)
 }
 
 static int aspeed_smc_setup_flash(struct aspeed_smc_controller *controller,
-				  struct device_node *np, struct resource *r)
+				  struct device_node *np, struct resource *r, resource_size_t baseAddr)
 {
 	const struct spi_nor_hwcaps hwcaps = {
 		.mask = SNOR_HWCAPS_READ |
@@ -1236,6 +1237,7 @@ static int aspeed_smc_setup_flash(struct aspeed_smc_controller *controller,
 	struct device_node *child;
 	unsigned int cs;
 	int ret = -ENODEV;
+	int flashSkip = 0;
 
 	for_each_available_child_of_node(np, child) {
 		struct aspeed_smc_chip *chip;
@@ -1307,7 +1309,14 @@ static int aspeed_smc_setup_flash(struct aspeed_smc_controller *controller,
 		 */
 		ret = spi_nor_scan(nor, NULL, &hwcaps);
 		if (ret)
+		{
+			if ((ret == -ENOENT) && (baseAddr == FSC_BASE_ADDRESS))	//fsc flash not found
+			{
+				flashSkip = 1;
+			}
+
 			break;
+		}
 
 		ret = aspeed_smc_chip_setup_finish(chip);
 		if (ret)
@@ -1322,7 +1331,16 @@ static int aspeed_smc_setup_flash(struct aspeed_smc_controller *controller,
 
 	if (ret) {
 		of_node_put(child);
-		aspeed_smc_unregister(controller);
+
+		if (1 == flashSkip)
+		{
+			dev_info(dev, "cs:%u skipped\n", cs);
+			return 0;
+		}
+		else
+		{
+			aspeed_smc_unregister(controller);
+		}
 	}
 
 	return ret;
@@ -1338,6 +1356,7 @@ static int aspeed_smc_probe(struct platform_device *pdev)
 	struct clk *clk;
 	struct resource *res;
 	int ret;
+	resource_size_t baseAddr = 0;
 
 	match = of_match_device(aspeed_smc_matches, &pdev->dev);
 	if (!match || !match->data)
@@ -1360,6 +1379,8 @@ static int aspeed_smc_probe(struct platform_device *pdev)
 	if (IS_ERR(controller->regs))
 		return PTR_ERR(controller->regs);
 
+	baseAddr = res->start;	//smc control register
+
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 1);
 	controller->ahb_base_phy = res->start;
 	controller->ahb_base = devm_ioremap_resource(dev, res);
@@ -1374,7 +1395,7 @@ static int aspeed_smc_probe(struct platform_device *pdev)
 	controller->clk_frequency = clk_get_rate(clk);
 	devm_clk_put(&pdev->dev, clk);
 
-	ret = aspeed_smc_setup_flash(controller, np, res);
+	ret = aspeed_smc_setup_flash(controller, np, res, baseAddr);
 	if (ret)
 		dev_err(dev, "Aspeed SMC probe failed %d\n", ret);
 
-- 
2.17.1

