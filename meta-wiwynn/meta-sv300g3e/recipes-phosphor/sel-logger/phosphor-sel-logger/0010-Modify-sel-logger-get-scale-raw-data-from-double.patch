From 9555d7094b87e7cf2fb2874747e596c35eb9a3c7 Mon Sep 17 00:00:00 2001
From: Dicos Tsai <dicos_tsai@wiwynn.com>
Date: Thu, 1 Apr 2021 10:13:57 +0800
Subject: [PATCH] Modify-sel-logger-get-scale-raw-data-from-double

---
 include/sensorutils.hpp | 39 ++++++++++++++++++++++++---------------
 1 file changed, 24 insertions(+), 15 deletions(-)

diff --git a/include/sensorutils.hpp b/include/sensorutils.hpp
index ce5d775..52e981c 100644
--- a/include/sensorutils.hpp
+++ b/include/sensorutils.hpp
@@ -156,28 +156,37 @@ static inline uint8_t
                              const int8_t rExp, const uint16_t bValue,
                              const int8_t bExp, const bool bSigned)
 {
-    int32_t scaledValue =
-        (value - (bValue * std::pow(10, bExp) * std::pow(10, rExp))) /
-        (mValue * std::pow(10, rExp));
+    if (mValue == 0)
+    {
+        throw std::out_of_range("Scaling multiplier is uninitialized");
+    }
+
+    auto dM = static_cast<double>(mValue);
+    auto dB = static_cast<double>(bValue);
+
+    double dX =
+        (value - (dB * std::pow(10, bExp) * std::pow(10, rExp))) /
+        (dM * std::pow(10, rExp));
+
+    auto scaledValue = static_cast<int32_t>(std::round(dX));
+
+    int32_t minClamp;
+    int32_t maxClamp;
 
     if (bSigned)
     {
-        if (scaledValue > std::numeric_limits<int8_t>::max() ||
-            scaledValue < std::numeric_limits<int8_t>::lowest())
-        {
-            throw std::out_of_range("Value out of range");
-        }
-        return static_cast<int8_t>(scaledValue);
+        minClamp = std::numeric_limits<int8_t>::lowest();
+        maxClamp = std::numeric_limits<int8_t>::max();
     }
     else
     {
-        if (scaledValue > std::numeric_limits<uint8_t>::max() ||
-            scaledValue < std::numeric_limits<uint8_t>::lowest())
-        {
-            throw std::out_of_range("Value out of range");
-        }
-        return static_cast<uint8_t>(scaledValue);
+        minClamp = std::numeric_limits<uint8_t>::lowest();
+        maxClamp = std::numeric_limits<uint8_t>::max();
     }
+
+    auto clampedValue = std::clamp(scaledValue, minClamp, maxClamp);
+
+    return static_cast<uint8_t>(clampedValue);
 }
 
 static inline uint8_t getScaledIPMIValue(const double value, const double max,
-- 
2.17.1

