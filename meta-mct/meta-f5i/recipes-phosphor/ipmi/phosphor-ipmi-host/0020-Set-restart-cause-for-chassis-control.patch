From db519cfbe7d8bd6c3e7bf44930d542d42aeb2c48 Mon Sep 17 00:00:00 2001
From: "ray.lue" <ray.lue@mic.com.tw>
Date: Mon, 31 May 2021 17:02:10 +0800
Subject: [PATCH 1/1] Set restart cause for chassis control

%% original patch: 0020-Set-restart-cause-for-chassis-control.patch
---
 chassishandler.cpp | 36 +++++++++++++++++++++++++++++++++++-
 1 file changed, 35 insertions(+), 1 deletion(-)

diff --git a/chassishandler.cpp b/chassishandler.cpp
index 8bf3a73..c8b0d03 100755
--- a/chassishandler.cpp
+++ b/chassishandler.cpp
@@ -57,6 +57,16 @@ constexpr size_t SIZE_COOKIE = 4;
 constexpr size_t SIZE_VERSION = 2;
 constexpr size_t DEFAULT_IDENTIFY_TIME_OUT = 15;
 
+constexpr auto RESTART_CAUSE_SERVICE = "xyz.openbmc_project.State.Host";
+constexpr auto RESTART_CAUSE_OBJPATH = "/xyz/openbmc_project/state/host0";
+constexpr auto RESTART_CAUSE_INTERFACE = "xyz.openbmc_project.State.Host";
+constexpr auto RESTART_CAUSE_PROPERTY = "RestartCause";
+constexpr auto RESTART_CAUSE_CHASSIS_CMD_PWRON = "xyz.openbmc_project.State.Host.RestartCause.ChassisCommandPowerOn";
+constexpr auto RESTART_CAUSE_CHASSIS_CMD_PWRCYCLE = "xyz.openbmc_project.State.Host.RestartCause.ChassisCommandPowerCycle";
+constexpr auto RESTART_CAUSE_CHASSIS_CMD_PWRRESET = "xyz.openbmc_project.State.Host.RestartCause.ChassisCommandPowerReset";
+constexpr auto PROPERTY_INTERFACE = "org.freedesktop.DBus.Properties";
+constexpr auto PROPERTY_SET_METHOD = "Set";
+
 // PetiBoot-Specific
 static constexpr uint8_t net_conf_initial_bytes[] = {0x80, 0x21, 0x70, 0x62,
                                                      0x21, 0x00, 0x01, 0x06};
@@ -504,6 +514,27 @@ uint32_t getPOHCounter()
     return std::get<uint32_t>(propValue);
 }
 
+int setRestartCause(std::string cause)
+{
+    auto bus = sdbusplus::bus::new_default_system();
+    auto method = bus.new_method_call(RESTART_CAUSE_SERVICE, RESTART_CAUSE_OBJPATH,
+                                        PROPERTY_INTERFACE, PROPERTY_SET_METHOD);
+    method.append(RESTART_CAUSE_INTERFACE, RESTART_CAUSE_PROPERTY, std::variant<std::string>(cause));
+
+    try
+    {
+        auto reply = bus.call(method);
+    }
+    catch(const std::exception& e)
+    {
+        std::cerr << "Fail to set restart cause:" << e.what() << '\n';
+        return -1;
+    }
+    
+    return 0;
+}
+
+
 /** @brief Implements the get chassis capabilities command
  *
  *  @returns IPMI completion code plus response data
@@ -1290,6 +1321,7 @@ int powerOnCb(void)
     }
     std::ofstream f("/run/openbmc/ipmi-poweron");
     if(f.is_open()) f.close();
+    setRestartCause(RESTART_CAUSE_CHASSIS_CMD_PWRON);
     return initiate_state_transition(State::Host::Transition::On);
 }
 
@@ -1302,6 +1334,7 @@ int powerOffCb(void)
     }
     std::ofstream f("/run/openbmc/ipmi-poweroff");
     if(f.is_open()) f.close();
+    //setRestartCause(RESTART_CAUSE_CHASSIS_CMD_PWRRESET);
     return initiate_state_transition(State::Host::Transition::Off);
 }
 
@@ -1372,13 +1405,13 @@ ipmi::RspType<> ipmiChassisControl(uint8_t chassisControl)
         case CMD_HARD_RESET:
             generateSELEvent(fruStatePowerReset,powerControlEventData);
             rc = initiate_state_transition(State::Host::Transition::ForceWarmReboot);
+            setRestartCause(RESTART_CAUSE_CHASSIS_CMD_PWRRESET);
             break;
             
         case CMD_POWER_CYCLE:
             // SPEC has a section that says certain implementations can trigger
             // PowerOn if power is Off when a command to power cycle is
             // requested
-
             // First create a file to indicate to the soft off application
             // that it should not run since this is a direct user initiated
             // power reboot request (i.e. a reboot request that is not
@@ -1386,6 +1419,7 @@ ipmi::RspType<> ipmiChassisControl(uint8_t chassisControl)
             indicate_no_softoff_needed();
             generateSELEvent(fruStatePowerCycle,powerControlEventData);
             rc = initiate_state_transition(State::Host::Transition::Reboot);
+            setRestartCause(RESTART_CAUSE_CHASSIS_CMD_PWRCYCLE);
             break;
 
         case CMD_SOFT_OFF_VIA_OVER_TEMP:
-- 
2.29.0

