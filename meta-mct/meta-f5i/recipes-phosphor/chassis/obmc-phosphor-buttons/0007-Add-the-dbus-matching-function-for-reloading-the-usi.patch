From f163fa2e7bceb3d998dcd6bdca2216647360f00e Mon Sep 17 00:00:00 2001
From: John Chung <john.chung@mic.com.tw>
Date: Wed, 16 Jun 2021 20:58:26 +0800
Subject: [PATCH] Add the dbus matching function for reloading the using button
 matcher

---
 inc/button_handler.hpp | 14 ++++++++++
 src/button_handler.cpp | 76 ++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 90 insertions(+)

diff --git a/inc/button_handler.hpp b/inc/button_handler.hpp
index 2d2fe9b..7a49485 100755
--- a/inc/button_handler.hpp
+++ b/inc/button_handler.hpp
@@ -102,6 +102,15 @@ class Handler
                            const std::string& interface) const;
 
     /**
+     * @brief The handler for updating using matcher
+     *
+     * Reload the using matcher
+     *
+     * @param[in] msg - sdbusplus message from signal
+     */
+    void updateMatcher(sdbusplus::message::message& msg);
+
+    /**
      * @brief sdbusplus connection object
      */
     sdbusplus::bus::bus& bus;
@@ -126,6 +135,11 @@ class Handler
      */
     std::unique_ptr<sdbusplus::bus::match_t> resetButtonReleased;
 
+    /**
+     * @brief Matches on the button dbus interface
+     */
+    std::unique_ptr<sdbusplus::bus::match_t> buttonHandler;
+
     //restart cause
     int setRestartCause(std::string cause);
 };
diff --git a/src/button_handler.cpp b/src/button_handler.cpp
index e53f82b..25c4038 100755
--- a/src/button_handler.cpp
+++ b/src/button_handler.cpp
@@ -68,9 +68,85 @@ int Handler::setRestartCause(std::string cause)
     return 0;
 }
 
+void Handler::updateMatcher(sdbusplus::message::message& msg)
+{
+    try
+    {
+        if (!getService(POWER_DBUS_OBJECT_NAME, powerButtonIface).empty())
+        {
+            log<level::INFO>("Starting power button handler");
+            powerButtonReleased = std::make_unique<sdbusplus::bus::match_t>(
+                bus,
+                sdbusRule::type::signal() + sdbusRule::member("Released") +
+                    sdbusRule::path(POWER_DBUS_OBJECT_NAME) +
+                    sdbusRule::interface(powerButtonIface),
+                std::bind(std::mem_fn(&Handler::powerPressed), this,
+                          std::placeholders::_1));
+
+            powerButtonLongPressReleased =
+                std::make_unique<sdbusplus::bus::match_t>(
+                    bus,
+                    sdbusRule::type::signal() +
+                        sdbusRule::member("PressedLong") +
+                        sdbusRule::path(POWER_DBUS_OBJECT_NAME) +
+                        sdbusRule::interface(powerButtonIface),
+                    std::bind(std::mem_fn(&Handler::longPowerPressed), this,
+                              std::placeholders::_1));
+        }
+    }
+    catch (SdBusError& e)
+    {
+        // The button wasn't implemented
+    }
+
+    try
+    {
+        if (!getService(ID_DBUS_OBJECT_NAME, idButtonIface).empty())
+        {
+            log<level::INFO>("Registering ID button handler");
+            idButtonReleased = std::make_unique<sdbusplus::bus::match_t>(
+                bus,
+                sdbusRule::type::signal() + sdbusRule::member("Released") +
+                    sdbusRule::path(ID_DBUS_OBJECT_NAME) +
+                    sdbusRule::interface(idButtonIface),
+                std::bind(std::mem_fn(&Handler::idPressed), this,
+                          std::placeholders::_1));
+        }
+    }
+    catch (SdBusError& e)
+    {
+        // The button wasn't implemented
+    }
+
+    try
+    {
+        if (!getService(RESET_DBUS_OBJECT_NAME, resetButtonIface).empty())
+        {
+            log<level::INFO>("Registering reset button handler");
+            resetButtonReleased = std::make_unique<sdbusplus::bus::match_t>(
+                bus,
+                sdbusRule::type::signal() + sdbusRule::member("Released") +
+                    sdbusRule::path(RESET_DBUS_OBJECT_NAME) +
+                    sdbusRule::interface(resetButtonIface),
+                std::bind(std::mem_fn(&Handler::resetPressed), this,
+                          std::placeholders::_1));
+        }
+    }
+    catch (SdBusError& e)
+    {
+        // The button wasn't implemented
+    }
+}
+
 
 Handler::Handler(sdbusplus::bus::bus& bus) : bus(bus)
 {
+    buttonHandler = std::make_unique<sdbusplus::bus::match_t>(
+        bus,
+        sdbusRule::type::signal() + sdbusRule::member("InterfacesAdded") +
+            sdbusRule::argNpath(0,"/xyz/openbmc_project/Chassis/"),
+        std::bind(std::mem_fn(&Handler::updateMatcher), this, std::placeholders::_1));
+
     try
     {
         if (!getService(POWER_DBUS_OBJECT_NAME, powerButtonIface).empty())
-- 
2.7.4

