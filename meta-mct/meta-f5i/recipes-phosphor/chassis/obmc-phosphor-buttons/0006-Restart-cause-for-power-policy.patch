From 6c9374098ca0607d565b54290ce09038a2e76f3d Mon Sep 17 00:00:00 2001
From: "ray.lue" <ray.lue@mic.com.tw>
Date: Mon, 31 May 2021 19:35:05 +0800
Subject: [PATCH 1/1] Restart cause for power policy

---
 inc/button_handler.hpp |  3 +++
 src/button_handler.cpp | 37 +++++++++++++++++++++++++++++++++++--
 2 files changed, 38 insertions(+), 2 deletions(-)

diff --git a/inc/button_handler.hpp b/inc/button_handler.hpp
index 1f3c007..2d2fe9b 100755
--- a/inc/button_handler.hpp
+++ b/inc/button_handler.hpp
@@ -125,6 +125,9 @@ class Handler
      * @brief Matches on the reset button released signal
      */
     std::unique_ptr<sdbusplus::bus::match_t> resetButtonReleased;
+
+    //restart cause
+    int setRestartCause(std::string cause);
 };
 
 } // namespace button
diff --git a/src/button_handler.cpp b/src/button_handler.cpp
index ff210ec..e53f82b 100755
--- a/src/button_handler.cpp
+++ b/src/button_handler.cpp
@@ -5,6 +5,8 @@
 #include <phosphor-logging/log.hpp>
 #include <xyz/openbmc_project/State/Chassis/server.hpp>
 #include <xyz/openbmc_project/State/Host/server.hpp>
+#include <iostream>
+
 
 namespace phosphor
 {
@@ -37,6 +39,36 @@ static const std::string sensorPath = "/xyz/openbmc_project/sensors/pwr_button/B
 static const std::string sensorPathAcpi = "/xyz/openbmc_project/sensors/acpi/ACPI_POWER_STATE";
 static constexpr size_t selEvtDataMaxSize = 3;
 
+constexpr auto RESTART_CAUSE_SERVICE = "xyz.openbmc_project.State.Host";
+constexpr auto RESTART_CAUSE_OBJPATH = "/xyz/openbmc_project/state/host0";
+constexpr auto RESTART_CAUSE_INTERFACE = "xyz.openbmc_project.State.Host";
+constexpr auto RESTART_CAUSE_PROPERTY = "RestartCause";
+constexpr auto RESTART_CAUSE_POWER_BTN = "xyz.openbmc_project.State.Host.RestartCause.PowerButton";
+constexpr auto RESTART_CAUSE_RESET_BTN = "xyz.openbmc_project.State.Host.RestartCause.ResetButton";
+constexpr auto PROPERTY_INTERFACE = "org.freedesktop.DBus.Properties";
+constexpr auto PROPERTY_SET_METHOD = "Set";
+
+int Handler::setRestartCause(std::string cause)
+{
+    auto bus = sdbusplus::bus::new_default_system();
+    auto method = bus.new_method_call(RESTART_CAUSE_SERVICE, RESTART_CAUSE_OBJPATH,
+                                        PROPERTY_INTERFACE, PROPERTY_SET_METHOD);
+    method.append(RESTART_CAUSE_INTERFACE, RESTART_CAUSE_PROPERTY, std::variant<std::string>(cause));
+
+    try
+    {
+        auto reply = bus.call(method);
+    }
+    catch(const std::exception& e)
+    {
+        std::cerr << "Fail to set restart cause:" << e.what() << '\n';
+        return -1;
+    }
+
+    return 0;
+}
+
+
 Handler::Handler(sdbusplus::bus::bus& bus) : bus(bus)
 {
     try
@@ -162,7 +194,7 @@ void Handler::logButtonEvent(uint8_t eventData0) const
 void Handler::powerPressed(sdbusplus::message::message& msg)
 {
     auto transition = Host::Transition::On;
-
+    setRestartCause(RESTART_CAUSE_POWER_BTN);
     try
     {
         logButtonEvent(0x00);
@@ -189,7 +221,7 @@ void Handler::longPowerPressed(sdbusplus::message::message& msg)
     bool assert = 1;
     std::vector<uint8_t> eventData(selEvtDataMaxSize, 0xFF);
     eventData[0] = 0x0A;
-
+    setRestartCause(RESTART_CAUSE_POWER_BTN);
     try
     {
         logButtonEvent(0x00);
@@ -226,6 +258,7 @@ void Handler::longPowerPressed(sdbusplus::message::message& msg)
 
 void Handler::resetPressed(sdbusplus::message::message& msg)
 {
+    setRestartCause(RESTART_CAUSE_RESET_BTN);
     try
     {
         logButtonEvent(0x02);
-- 
2.29.0

