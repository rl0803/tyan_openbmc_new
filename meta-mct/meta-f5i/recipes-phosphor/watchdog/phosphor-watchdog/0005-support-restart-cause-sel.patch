From bf40d380528f23eed9671acae7d7de00d62d83ba Mon Sep 17 00:00:00 2001
From: "ray.lue" <ray.lue@mic.com.tw>
Date: Tue, 1 Jun 2021 18:59:30 +0800
Subject: [PATCH 1/1] support restart cause sel

---
 watchdog.cpp | 24 ++++++++++++++++++++++++
 1 file changed, 24 insertions(+)

diff --git a/watchdog.cpp b/watchdog.cpp
index eaea9b5..3f70d95 100755
--- a/watchdog.cpp
+++ b/watchdog.cpp
@@ -23,6 +23,15 @@ constexpr auto SYSTEMD_SERVICE = "org.freedesktop.systemd1";
 constexpr auto SYSTEMD_ROOT = "/org/freedesktop/systemd1";
 constexpr auto SYSTEMD_INTERFACE = "org.freedesktop.systemd1.Manager";
 
+constexpr auto RESTART_CAUSE_SERVICE = "xyz.openbmc_project.State.Host";
+constexpr auto RESTART_CAUSE_OBJPATH = "/xyz/openbmc_project/state/host0";
+constexpr auto RESTART_CAUSE_INTERFACE = "xyz.openbmc_project.State.Host";
+constexpr auto RESTART_CAUSE_PROPERTY = "RestartCause";
+constexpr auto RESTART_CAUSE_WDR_RESET = "xyz.openbmc_project.State.Host.RestartCause.WatchdogTimer";
+constexpr auto PROPERTY_INTERFACE = "org.freedesktop.DBus.Properties";
+constexpr auto PROPERTY_SET_METHOD = "Set";
+
+
 void Watchdog::resetTimeRemaining(bool enableWatchdog)
 {
     timeRemaining(interval());
@@ -226,6 +235,21 @@ void Watchdog::addWatchdogSEL(Base::Watchdog::Action action,Base::Watchdog::Time
             break;
     }
 
+    if(eventData1)
+    {
+        try
+        {
+            auto method = bus.new_method_call(RESTART_CAUSE_SERVICE, RESTART_CAUSE_OBJPATH,
+                                               PROPERTY_INTERFACE, PROPERTY_SET_METHOD);
+            method.append(RESTART_CAUSE_INTERFACE, RESTART_CAUSE_PROPERTY, std::variant<std::string>(RESTART_CAUSE_WDR_RESET));
+            bus.call_noreply(method);
+        }
+        catch(const std::exception& e)
+        {
+            log<level::ERR>("watchdog: Failed to set restart cause", entry("ERROR=%s", e.what()));
+        }
+    }
+
     try
     {
         auto method =
-- 
2.29.0

